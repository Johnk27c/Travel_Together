package Vistas;

import Entidades.Alojamiento;
import Entidades.Ciudad;
import Entidades.Estadia;
import Entidades.Paquete;
import Entidades.Pasaje;
import Entidades.Pension;
import Persistencia.AlojamientoData;
import Persistencia.CiudadData;
import Persistencia.PensionData;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gabriel Jara
 */
public class VistaContratarPaquete extends javax.swing.JInternalFrame {

    private ArrayList<String> temporadas = new ArrayList();
    private CiudadData accesoCiudad = new CiudadData();
    private AlojamientoData accesoAlojamiento = new AlojamientoData();
    private Paquete paqueteActual = new Paquete();
    private HashSet<Ciudad> listaCiudadesOrigen = new HashSet();
    private HashSet<Ciudad> listaCiudadesDestino = new HashSet();
    private DefaultTableModel modelo = new DefaultTableModel();
    private PensionData accesoPension = new PensionData();
    private boolean fechasOK;
    private Pension pensionActual;
    private Estadia estadiaActual;
    private Pasaje pasaje;
    private JDesktopPane jDesktopPanel;
    double precioPaquete;
    double precioPension;
    double precioTransporte;
    double precioTraslado;
    int cantidadDisponibleAlojamiento;
    boolean paqueteEstaListo;

    /**
     * Creates new form ContratarPaquete
     */
    public VistaContratarPaquete(JDesktopPane jDP) {
        initComponents();
        temporadas.add("Temporada Alta: Mes de julio de 2025 y desde el 15 de diciembre al 28 de febrero");
        temporadas.add("Temporada Media: 21 de septiembre al 14 de diciembre// 17 de abril al 20 de abril (Sem. Santa)");
        temporadas.add("Temporada Baja: 1 de marzo al 16 de abril // 21 de abril al 30 de junio // 1 de agosto al 14 de diciembre");
        cargarCiudadesOrigen();
        actualizarCiudadesDestino();
        cargarCbx(listaCiudadesOrigen, cbx_ciudadOrigen);
        cargarCbx(listaCiudadesDestino, cbx_ciudadDestino);
        cbx_temporada.setSelectedIndex(-1);
        cargarEventosFechas();
        cbx_tipoPaquete.setEnabled(false);
        armarCabecera();
        cbx_tipoPaquete.setSelectedIndex(-1);
        date_fechaInicio.setMinSelectableDate(new Date());
        jDesktopPanel = jDP;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_temporada = new javax.swing.JLabel();
        cbx_tipoPaquete = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        date_fechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        date_fechaFin = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        spn_cantAdultos = new javax.swing.JSpinner();
        spn_cantMenores = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        cbx_temporada = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_informacion = new javax.swing.JTable();
        btn_contratar = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        cbx_ciudadOrigen = new javax.swing.JComboBox<>();
        cbx_ciudadDestino = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setClosable(true);

        jLabel1.setText("Origen");

        jLabel2.setText("Destino");

        lbl_temporada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_temporada.setText(" ");

        cbx_tipoPaquete.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personalizado", "Estándar", "Económico" }));
        cbx_tipoPaquete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_tipoPaqueteActionPerformed(evt);
            }
        });

        jLabel6.setText("Temporada");

        jLabel7.setText("Fecha Inicio");

        jLabel8.setText("Fecha Fin");

        jLabel9.setText("Cantidad de pasajeros:");

        jLabel10.setText("Adultos");

        jLabel11.setText("Menores");

        jLabel12.setText("Seleccione el tipo de paquete");

        cbx_temporada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alta", "Media", "Baja" }));
        cbx_temporada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_temporadaActionPerformed(evt);
            }
        });

        jLabel13.setText("Información del paquete (El monto es por persona)");

        jLabel14.setText("ESPECIFICACIONES DEL PAQUETE TURÍSTICO");

        jLabel15.setText("PASAJEROS");

        jLabel16.setText("DESTINO Y FECHA");

        tabla_informacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Descripción", "Detalle", "Monto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_informacion.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabla_informacion);
        if (tabla_informacion.getColumnModel().getColumnCount() > 0) {
            tabla_informacion.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        btn_contratar.setText("Contratar");
        btn_contratar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_contratarActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Diagrama/TravelTogether.png"))); // NOI18N
        jLabel17.setText("CONTRATACIÓN DE PAQUETE");

        cbx_ciudadOrigen.setToolTipText("");
        cbx_ciudadOrigen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbx_ciudadOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_ciudadOrigenActionPerformed(evt);
            }
        });

        cbx_ciudadDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_ciudadDestinoActionPerformed(evt);
            }
        });

        jLabel18.setText("IMPORTANTE: Una vez contratado el paquete, no se podrá modificar la fecha de viaje");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_temporada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(536, 536, 536))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(cbx_temporada, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(date_fechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(date_fechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(cbx_ciudadOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(cbx_ciudadDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33))))
            .addGroup(layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(btn_contratar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(29, 29, 29))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(23, 23, 23)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(spn_cantMenores, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                            .addComponent(spn_cantAdultos, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(37, 37, 37)
                                        .addComponent(cbx_tipoPaquete, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(cbx_ciudadOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_ciudadDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(date_fechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(date_fechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(cbx_temporada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_temporada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cbx_tipoPaquete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(spn_cantAdultos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(spn_cantMenores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(btn_contratar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbx_temporadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_temporadaActionPerformed
        date_fechaInicio.setEnabled(true);
        date_fechaFin.setEnabled(true);
        if (cbx_temporada.getSelectedItem() == null) {
            lbl_temporada.setText(" ");
            date_fechaInicio.setEnabled(false);
            date_fechaFin.setEnabled(false);
        } else if (cbx_temporada.getSelectedItem().equals("Alta")) {
            lbl_temporada.setText(temporadas.get(0));
        } else if (cbx_temporada.getSelectedItem().equals("Media")) {
            lbl_temporada.setText(temporadas.get(1));
        } else {
            lbl_temporada.setText(temporadas.get(2));
        }
        verificarYActivarCbx();
        borrarfilaTabla();
        date_fechaInicio.setDate(null);
        date_fechaFin.setDate(null);

    }//GEN-LAST:event_cbx_temporadaActionPerformed

    private void cbx_ciudadOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_ciudadOrigenActionPerformed
        Ciudad cdadOrigen = (Ciudad) cbx_ciudadOrigen.getSelectedItem();
        Ciudad cdadDestino = (Ciudad) cbx_ciudadDestino.getSelectedItem();
        System.out.println(cdadOrigen);
        System.out.println(cdadDestino);
        if (cdadDestino == null) {
            actualizarCiudadesDestino();
            cargarCbx(listaCiudadesDestino, cbx_ciudadDestino);
        } else if (cdadDestino.getCodCiudad() == cdadOrigen.getCodCiudad()) {
            actualizarCiudadesDestino();
            cargarCbx(listaCiudadesDestino, cbx_ciudadDestino);
        }
        verificarYActivarCbx();
        borrarfilaTabla();
    }//GEN-LAST:event_cbx_ciudadOrigenActionPerformed

    private void cbx_ciudadDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_ciudadDestinoActionPerformed
        verificarYActivarCbx();
        borrarfilaTabla();
    }//GEN-LAST:event_cbx_ciudadDestinoActionPerformed

    private void cbx_tipoPaqueteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_tipoPaqueteActionPerformed
        if (cbx_tipoPaquete.getSelectedItem() != null) {
            spn_cantAdultos.setEnabled(true);
            spn_cantMenores.setEnabled(true);
            double precioEstadia;
            double recargoTemporada;
            double precioSubtotal;
            String tipoTransporte;
            paqueteActual.setFechaIni(pasarALocalDate(date_fechaInicio.getDate()));
            paqueteActual.setFechaFin(pasarALocalDate(date_fechaFin.getDate()));
            pasaje = new Pasaje(pasarALocalDate(date_fechaInicio.getDate()).atStartOfDay(), (Ciudad) cbx_ciudadOrigen.getSelectedItem(), (Ciudad) cbx_ciudadDestino.getSelectedItem());
            paqueteActual.setBoleto(pasaje);
            paqueteActual.setTemporada((String) cbx_temporada.getSelectedItem());

            switch (cbx_tipoPaquete.getSelectedItem().toString()) {
                case "Personalizado":
                    paqueteActual.setTipo("Personalizado");
                    VistaPersonalizado vista = new VistaPersonalizado(paqueteActual, "Contratar", this, null);
                    vista.setVisible(true);
                    jDesktopPanel.add(vista);
                    vista.show();
                    this.toBack();
                    borrarfilaTabla();
                    System.out.println("Personalizado");
                    break;
                case "Estándar":
                    Alojamiento alo = buscarAlojamientoEstandarOEconomico((Ciudad) cbx_ciudadDestino.getSelectedItem(), "Maximo");
                    pensionActual = accesoPension.buscarPorCodigo(2);
                    borrarfilaTabla();
                    precioEstadia = alo.getPrecioNoche() * diasEstadia();
                    precioTransporte = 100000;
                    paqueteActual.getBoleto().setPrecio(precioTransporte);
                    precioPension = precioEstadia * pensionActual.getPorcentaje();
                    tipoTransporte = "Avión - CLASE MEDIA";
                    cantidadDisponibleAlojamiento=alo.getCapacidad();

                    modelo.addRow(new Object[]{"Alojamiento (Capacidad)", alo.getTipo() + ": " + alo.getNombreAlojamiento() + " (" + alo.getCapacidad() + ")", alo.getPrecioNoche() + " x " + diasEstadia() + " dias"});
                    modelo.addRow(new Object[]{"Total por Alojamiento", "", precioEstadia});
                    modelo.addRow(new Object[]{"Transporte", tipoTransporte, precioTransporte});
                    precioSubtotal = precioEstadia + precioTransporte;
                    precioTraslado = precioSubtotal * 0.01;
                    recargoTemporada = precioSubtotal * recargoPorTemporada() / 100;
                    modelo.addRow(new Object[]{"Pensión (% de la estadia)", pensionActual.getNombre() + " (" + 100 * pensionActual.getPorcentaje() + "%)", precioPension});
                    modelo.addRow(new Object[]{"Traslado(% del total)", "Incluido (" + 0.01 * 100 + ")%", precioTraslado});
                    modelo.addRow(new Object[]{"Recargo por temporada", cbx_temporada.getSelectedItem() + " (" + recargoPorTemporada() + "%)", recargoTemporada});
                    precioPaquete = precioSubtotal + precioPension + precioTraslado + recargoTemporada;
                    modelo.addRow(new Object[]{"VALOR POR PERSONA", "", precioPaquete});
                    paqueteEstaListo=true;
                    break;
                default:
                    alo = buscarAlojamientoEstandarOEconomico((Ciudad) cbx_ciudadDestino.getSelectedItem(), "Minimo");
                    pensionActual = accesoPension.buscarPorCodigo(1);
                    borrarfilaTabla();
                    precioEstadia = alo.getPrecioNoche() * diasEstadia();
                    precioTransporte = 35000;
                    paqueteActual.getBoleto().setPrecio(precioTransporte);
                    precioPension = precioEstadia * pensionActual.getPorcentaje();
                    tipoTransporte = "Colectivo - SEMICAMA";
                    cantidadDisponibleAlojamiento=alo.getCapacidad();

                    modelo.addRow(new Object[]{"Alojamiento (Capacidad)", alo.getTipo() + ": " + alo.getNombreAlojamiento() + " (" + alo.getCapacidad() + ")", alo.getPrecioNoche() + " x " + diasEstadia() + " dias"});
                    modelo.addRow(new Object[]{"Total por Alojamiento", "", precioEstadia});
                    modelo.addRow(new Object[]{"Transporte", tipoTransporte, precioTransporte});
                    precioSubtotal = precioEstadia + precioTransporte;
                    precioTraslado = precioSubtotal * 0.01;
                    recargoTemporada = precioSubtotal * recargoPorTemporada() / 100;
                    modelo.addRow(new Object[]{"Pensión (% de la estadia)", pensionActual.getNombre() + " (" + 100 * pensionActual.getPorcentaje() + "%)", precioPension});
                    modelo.addRow(new Object[]{"Traslado(% del total)", "Incluido (" + 0.01 * 100 + ")%", precioTraslado});
                    modelo.addRow(new Object[]{"Recargo por temporada (% del total)", cbx_temporada.getSelectedItem() + " (" + recargoPorTemporada() + "%)", recargoTemporada});
                    precioPaquete = precioSubtotal + precioPension + precioTraslado + recargoTemporada;
                    modelo.addRow(new Object[]{"VALOR POR PERSONA", "", precioPaquete});
                    System.out.println(paqueteActual);
                    paqueteEstaListo=true;
                    break;
            }
        }
    }//GEN-LAST:event_cbx_tipoPaqueteActionPerformed

    private void btn_contratarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_contratarActionPerformed
        if(paqueteEstaListo){
            if((int)spn_cantAdultos.getValue()<0||(int)spn_cantAdultos.getValue()<0){
                JOptionPane.showMessageDialog(rootPane, "Las cantidades de personas no pueden ser negativas");
            } else if((int)spn_cantAdultos.getValue()+(int)spn_cantAdultos.getValue()==0){
                JOptionPane.showMessageDialog(rootPane, "Se debe seleccionar una cantidad de personas");
            } else if((int)spn_cantAdultos.getValue()+(int)spn_cantAdultos.getValue()>cantidadDisponibleAlojamiento){
                JOptionPane.showMessageDialog(rootPane, "No hay disponibilidad para tantas personas (Máximo: "+cantidadDisponibleAlojamiento+")");
            } else{
                VistaCargaPersonas cargaPersonas = new VistaCargaPersonas(paqueteActual);
                    cargaPersonas.setVisible(true);
                    jDesktopPanel.add(cargaPersonas);
                    cargaPersonas.show();
                    this.toBack();
            }
        }
    }//GEN-LAST:event_btn_contratarActionPerformed

    private void cargarCbx(HashSet lista, JComboBox comboBox) {
        comboBox.removeAllItems();
        if (lista.size() > 0) {
            for (Object ob : lista) {
                comboBox.addItem(ob);
            }
        }
        comboBox.setSelectedIndex(-1);
    }

    private void actualizarCiudadesDestino() { //Actualiza array de ciudades de destino en base a la ciudad de Origen seleccionada
        HashSet<Ciudad> listaDestino = new HashSet();

        HashSet<Integer> idCiudadesDestino = accesoAlojamiento.mostrarCiudades();
        System.out.println(idCiudadesDestino);
        for (Integer id : idCiudadesDestino) {
            listaDestino.add((Ciudad) accesoCiudad.buscarCiudadPorID(id));
        }
        if (cbx_ciudadOrigen.getSelectedItem() != null) {
            Ciudad ciudadSeleccionada = (Ciudad) cbx_ciudadOrigen.getSelectedItem();
            Iterator<Ciudad> it = listaDestino.iterator();
            while (it.hasNext()) {
                Ciudad cdad = it.next();
                if (ciudadSeleccionada.getCodCiudad() == cdad.getCodCiudad()) {
                    it.remove();
                }
            }
        }
        listaCiudadesDestino = listaDestino;
        System.out.println(listaDestino);
    }

    private void cargarCiudadesOrigen() {
        HashSet<Ciudad> listaOrigen = new HashSet();

        HashSet<Integer> idCiudadesOrigen = accesoCiudad.listarCiudades();
        for (Integer id : idCiudadesOrigen) {
            listaOrigen.add((Ciudad) accesoCiudad.buscarCiudadPorID(id));
        }
        if (cbx_ciudadDestino.getSelectedItem() != null) {
            listaOrigen.remove((Ciudad) cbx_ciudadDestino.getSelectedItem());
        }
        listaCiudadesOrigen = listaOrigen;
    }

    private void cargarEventosFechas() {
        date_fechaInicio.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                verificarFechas();
                date_fechaFin.setMinSelectableDate(date_fechaInicio.getDate());
            }
        });

        date_fechaFin.getDateEditor().addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                verificarFechas();
            }
        });
    }

    private void verificarFechas() {
        if (date_fechaInicio.getDate() != null && date_fechaFin.getDate() != null) {
            Date fechaIni = date_fechaInicio.getDate();
            Date fechaFin = date_fechaFin.getDate();
            if (fechaIni.before(fechaFin)) {
                if (cbx_temporada.getSelectedItem().equals("Alta")) {
                    Date fechaInicio1 = pasarADate(2024, Month.DECEMBER, 15);
                    Date fechaFin1 = pasarADate(2025, Month.MARCH, 1);
                    Date fechaInicio2 = pasarADate(2025, Month.JULY, 1);
                    Date fechaFin2 = pasarADate(2025, Month.AUGUST, 1);
                    if (estaEntreFechas(fechaIni, fechaFin, fechaInicio1, fechaFin1) || estaEntreFechas(fechaIni, fechaFin, fechaInicio2, fechaFin2)) {
                        fechasOK = true;
                        System.out.println("Está entre las fechas correctas");
                    } else {
                        fechasOK = false;
                        JOptionPane.showMessageDialog(null, "Es temporada ALTA: la fecha debería estar entre " + temporadas.get(0));
                        date_fechaFin.setDate(null);
                    }
                } else if (cbx_temporada.getSelectedItem().equals("Media")) {
                    Date fechaInicio1 = pasarADate(2024, Month.SEPTEMBER, 21);
                    Date fechaFin1 = pasarADate(2024, Month.DECEMBER, 15);
                    Date fechaInicio2 = pasarADate(2025, Month.APRIL, 17);
                    Date fechaFin2 = pasarADate(2025, Month.APRIL, 21);
                    if (estaEntreFechas(fechaIni, fechaFin, fechaInicio1, fechaFin1) || estaEntreFechas(fechaIni, fechaFin, fechaInicio2, fechaFin2)) {
                        System.out.println("Está entre las fechas correctas");
                        fechasOK = true;
                    } else {
                        fechasOK = false;
                        JOptionPane.showMessageDialog(null, "Es temporada MEDIA: la fecha debería estar entre " + temporadas.get(1));
                        date_fechaFin.setDate(null);
                    }
                } else if (cbx_temporada.getSelectedItem().equals("Baja")) {
                    Date fechaInicio1 = pasarADate(2025, Month.MARCH, 1);
                    Date fechaFin1 = pasarADate(2025, Month.APRIL, 17);
                    Date fechaInicio2 = pasarADate(2025, Month.APRIL, 21);
                    Date fechaFin2 = pasarADate(2025, Month.JULY, 1);
                    Date fechaInicio3 = pasarADate(2025, Month.AUGUST, 1);
                    Date fechaFin3 = pasarADate(2025, Month.DECEMBER, 15);
                    if (estaEntreFechas(fechaIni, fechaFin, fechaInicio1, fechaFin1) || estaEntreFechas(fechaIni, fechaFin, fechaInicio2, fechaFin2) || estaEntreFechas(fechaIni, fechaFin, fechaInicio3, fechaFin3)) {
                        System.out.println("Está entre las fechas correctas");
                        fechasOK = true;
                    } else {
                        fechasOK = false;
                        JOptionPane.showMessageDialog(null, "Es temporada BAJA: la fecha debería estar entre " + temporadas.get(2));
                        date_fechaFin.setDate(null);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "La fecha de inicio no puede ser posterior a la fecha de fin");
                date_fechaFin.setDate(null);
            }
        } else {
            System.out.println("Falta elegir una de las fechas");
        }
        verificarYActivarCbx();
    }

    private boolean estaEntreFechas(Date inicio, Date fin, Date limiteIni, Date limiteFin) {
        return (inicio.equals(limiteIni) || inicio.after(limiteIni)) && (fin.before(limiteFin) || fin.equals(limiteFin));
    }

    private Date pasarADate(int anio, Month mes, int dia) {
        Date fecha = Date.from(LocalDate.of(anio, mes, dia).atStartOfDay(ZoneId.systemDefault()).toInstant());
        return fecha;
    }

    private LocalDate pasarALocalDate(Date fecha) {
        LocalDate fechaLocal = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        return fechaLocal;
    }

    private boolean datosInicialesCargados() {
        return date_fechaFin.getDate() != null && date_fechaInicio.getDate() != null && cbx_ciudadOrigen.getSelectedItem() != null && cbx_ciudadDestino.getSelectedItem() != null && cbx_temporada.getSelectedItem() != null && fechasOK;
    }

    private void reiniciarYDeshabilitarSpinners() {
        spn_cantAdultos.setEnabled(false);
        spn_cantAdultos.setValue(0);
        spn_cantMenores.setEnabled(false);
        spn_cantMenores.setValue(0);
    }

    private void verificarYActivarCbx() {
        if (datosInicialesCargados()) {
            cbx_tipoPaquete.setEnabled(true);
            cbx_tipoPaquete.setSelectedIndex(-1);
        } else {
            cbx_tipoPaquete.setEnabled(false);
            cbx_tipoPaquete.setSelectedIndex(-1);
            reiniciarYDeshabilitarSpinners();
        }
    }

    private void armarCabecera() {
        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("Descripción");
        filaCabecera.add("Detalle");
        filaCabecera.add("Costo por noche");
        for (Object it : filaCabecera) {
            modelo.addColumn(it);
        }
        tabla_informacion.setModel(modelo);
        tabla_informacion.getColumnModel().getColumn(2).setPreferredWidth(20);
    }

    private Alojamiento buscarAlojamientoEstandarOEconomico(Ciudad cdad, String maxMin) {
        ArrayList<Alojamiento> listaAlojamientos = accesoAlojamiento.buscarAlojamientPorCiudad(cdad.getCodCiudad());
        System.out.println(listaAlojamientos);
        Alojamiento alojamientoSeleccionado = null;
        for (Alojamiento alo : listaAlojamientos) {
            if (alojamientoSeleccionado == null) {
                alojamientoSeleccionado = alo;
            } else {
                if (maxMin.equals("Maximo") && alo.getPrecioNoche() > alojamientoSeleccionado.getPrecioNoche()) {
                    alojamientoSeleccionado = alo;
                }
                if (maxMin.equals("Minimo") && alo.getPrecioNoche() < alojamientoSeleccionado.getPrecioNoche()) {
                    alojamientoSeleccionado = alo;
                }
            }
        }
        return alojamientoSeleccionado;
    }

    private void borrarfilaTabla() {
        int indice = modelo.getRowCount() - 1;
        for (int i = indice; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private long diasEstadia() {
        long difDias = 0;
        if (date_fechaFin.getDate() != null && date_fechaInicio.getDate() != null) {
            long difDiasMilSeg = date_fechaFin.getDate().getTime() - date_fechaInicio.getDate().getTime();
            difDias = TimeUnit.DAYS.convert(difDiasMilSeg, TimeUnit.MILLISECONDS);
            System.out.println(difDias);
        }
        return difDias;
    }

    private int recargoPorTemporada() {
        int recargo = 0;
        if (cbx_temporada.getSelectedItem() != null) {
            switch ((String) cbx_temporada.getSelectedItem()) {
                case "Alta":
                    recargo = 30;
                    break;
                case "Media":
                    recargo = 15;
                    break;
                default:
                    recargo = 0;
                    break;
            }
        }
        return recargo;
    }

    public void cargarDatosPaqueteActual() {
        String traslado;
        double valorTraslado = paqueteActual.getPrecioTraslados();
        if (valorTraslado > 0) {
            traslado = "Incluido";
        } else {
            traslado = "Sin traslado";
        }
        double precioEstadia = paqueteActual.getEstadia().getAlojamiento().getPrecioNoche() * diasEstadia();
        precioTransporte = paqueteActual.getBoleto().getPrecio();
        precioPension = paqueteActual.getRegimen().getPorcentaje() * precioEstadia;
        double precioSubtotal = precioEstadia + precioTransporte;
        double recargoTemporada = precioSubtotal * recargoPorTemporada() / 100;
        precioTraslado = paqueteActual.getPrecioTraslados() * precioSubtotal;
        precioPaquete = precioSubtotal + precioPension + recargoTemporada + precioTraslado;
        String tipoTransporte = paqueteActual.getBoleto().getTransporte();
        cantidadDisponibleAlojamiento=paqueteActual.getEstadia().getAlojamiento().getCapacidad();

        modelo.addRow(new Object[]{"Alojamiento (Capacidad)", paqueteActual.getEstadia().getAlojamiento().getTipo() + ": " + paqueteActual.getEstadia().getAlojamiento().getNombreAlojamiento() + " (" + cantidadDisponibleAlojamiento + ")", paqueteActual.getEstadia().getAlojamiento().getPrecioNoche() + " x " + diasEstadia() + " dias"});
        modelo.addRow(new Object[]{"Total por Alojamiento", "", precioEstadia});
        modelo.addRow(new Object[]{"Transporte", tipoTransporte, precioTransporte});
        modelo.addRow(new Object[]{"Pensión (% de la estadia)", paqueteActual.getRegimen().getNombre() + " (" + 100 * paqueteActual.getRegimen().getPorcentaje() + "%)", precioPension});
        modelo.addRow(new Object[]{"Traslado(% del total)", traslado + " (" + valorTraslado * 100 + "%)", precioTraslado});
        modelo.addRow(new Object[]{"Recargo por temporada (% del total)", paqueteActual.getTemporada() + " (" + recargoPorTemporada() + "%)", recargoTemporada});
        modelo.addRow(new Object[]{"VALOR POR PERSONA", "", precioPaquete});
        paqueteEstaListo=true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_contratar;
    private javax.swing.JComboBox<Ciudad> cbx_ciudadDestino;
    private javax.swing.JComboBox<Ciudad> cbx_ciudadOrigen;
    private javax.swing.JComboBox<String> cbx_temporada;
    private javax.swing.JComboBox<String> cbx_tipoPaquete;
    private com.toedter.calendar.JDateChooser date_fechaFin;
    private com.toedter.calendar.JDateChooser date_fechaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_temporada;
    private javax.swing.JSpinner spn_cantAdultos;
    private javax.swing.JSpinner spn_cantMenores;
    private javax.swing.JTable tabla_informacion;
    // End of variables declaration//GEN-END:variables
}
